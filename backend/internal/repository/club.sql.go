// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: club.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkClubId = `-- name: CheckClubId :one
SELECT CASE WHEN EXISTS (
    SELECT id, name, nationality
    FROM club
    WHERE id = $1
)
THEN true
ELSE false END
`

func (q *Queries) CheckClubId(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkClubId, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createClub = `-- name: CreateClub :exec
INSERT INTO club (id, name, nationality)
VALUES ($1, $2, $3)
ON CONFLICT(id) DO NOTHING
`

type CreateClubParams struct {
	ID          int32
	Name        string
	Nationality pgtype.Text
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) error {
	_, err := q.db.Exec(ctx, createClub, arg.ID, arg.Name, arg.Nationality)
	return err
}

const getClubIds = `-- name: GetClubIds :many
SELECT id FROM club
`

func (q *Queries) GetClubIds(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getClubIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubs = `-- name: GetClubs :many
SELECT id, name, nationality FROM club
`

func (q *Queries) GetClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.Query(ctx, getClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(&i.ID, &i.Name, &i.Nationality); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
