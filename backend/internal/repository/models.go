// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderM Gender = "M"
	GenderW Gender = "W"
	GenderX Gender = "X"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type Ageclass struct {
	ID   int32
	Name string
}

type AgeclassToResult struct {
	Ageclassid int32
	Resultid   int32
	Eventid    int32
}

type Club struct {
	ID          int32
	Name        string
	Nationality pgtype.Text
}

type Event struct {
	ID        int32
	Sessionid int32
	Displaynr int32
	Name      string
}

type Heat struct {
	ID      int32
	Eventid int32
	Heatnr  int32
}

type Meet struct {
	ID             int32
	Name           string
	Image          pgtype.Text
	Invitations    []string
	Deadline       pgtype.Timestamp
	Address        string
	Startdate      pgtype.Date
	Enddate        pgtype.Date
	Googlemapslink pgtype.Text
	Msecmid        pgtype.Int4
}

type Result struct {
	ID             int32
	Swimmerid      int32
	Time           pgtype.Time
	Splits         []byte
	Finapoints     pgtype.Int4
	Additionalinfo pgtype.Text
	Penalty        pgtype.Bool
	Reactiontime   pgtype.Float4
}

type Session struct {
	ID           int32
	Meetid       int32
	Day          pgtype.Date
	Warmupstart  pgtype.Time
	Sessionstart pgtype.Time
	Displaynr    int32
}

type Start struct {
	Heatid    int32
	Swimmerid int32
	Lane      int32
	Time      pgtype.Time
}

type Swimmer struct {
	ID        int32
	Birthyear pgtype.Int4
	Clubid    int32
	Gender    Gender
	Firstname string
	Lastname  string
	Isrelay   bool
}
