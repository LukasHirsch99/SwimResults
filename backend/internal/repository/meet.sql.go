// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meet.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMeetById = `-- name: GetMeetById :one
SELECT id, name, image, invitations, deadline, address, startdate, enddate, googlemapslink, msecmid FROM meet where id = $1
`

func (q *Queries) GetMeetById(ctx context.Context, id int32) (Meet, error) {
	row := q.db.QueryRow(ctx, getMeetById, id)
	var i Meet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Invitations,
		&i.Deadline,
		&i.Address,
		&i.Startdate,
		&i.Enddate,
		&i.Googlemapslink,
		&i.Msecmid,
	)
	return i, err
}

const getMeetByMsecmId = `-- name: GetMeetByMsecmId :one
SELECT id, name, image, invitations, deadline, address, startdate, enddate, googlemapslink, msecmid FROM meet where msecmid = $1
`

func (q *Queries) GetMeetByMsecmId(ctx context.Context, msecmid pgtype.Int4) (Meet, error) {
	row := q.db.QueryRow(ctx, getMeetByMsecmId, msecmid)
	var i Meet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Invitations,
		&i.Deadline,
		&i.Address,
		&i.Startdate,
		&i.Enddate,
		&i.Googlemapslink,
		&i.Msecmid,
	)
	return i, err
}

const getMeets = `-- name: GetMeets :many
SELECT id, name, image, invitations, deadline, address, startdate, enddate, googlemapslink, msecmid FROM meet
`

func (q *Queries) GetMeets(ctx context.Context) ([]Meet, error) {
	rows, err := q.db.Query(ctx, getMeets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meet
	for rows.Next() {
		var i Meet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Invitations,
			&i.Deadline,
			&i.Address,
			&i.Startdate,
			&i.Enddate,
			&i.Googlemapslink,
			&i.Msecmid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodaysMeets = `-- name: GetTodaysMeets :many
SELECT id, name, image, invitations, deadline, address, startdate, enddate, googlemapslink, msecmid FROM meet WHERE startdate <= now() AND enddate >= now()
`

func (q *Queries) GetTodaysMeets(ctx context.Context) ([]Meet, error) {
	rows, err := q.db.Query(ctx, getTodaysMeets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meet
	for rows.Next() {
		var i Meet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Invitations,
			&i.Deadline,
			&i.Address,
			&i.Startdate,
			&i.Enddate,
			&i.Googlemapslink,
			&i.Msecmid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertMeet = `-- name: UpsertMeet :exec
INSERT INTO meet (id, name, image, invitations, deadline, address, startdate, enddate, googlemapslink, msecmid) 
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
  ON CONFLICT (id)
  DO UPDATE SET name = $2, image = $3, invitations = $4, deadline = $5, address = $6,
  startdate = $7, enddate = $8, googlemapslink = $9, msecmid = $10
`

type UpsertMeetParams struct {
	ID             int32
	Name           string
	Image          pgtype.Text
	Invitations    []string
	Deadline       pgtype.Timestamp
	Address        string
	Startdate      pgtype.Date
	Enddate        pgtype.Date
	Googlemapslink pgtype.Text
	Msecmid        pgtype.Int4
}

func (q *Queries) UpsertMeet(ctx context.Context, arg UpsertMeetParams) error {
	_, err := q.db.Exec(ctx, upsertMeet,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.Invitations,
		arg.Deadline,
		arg.Address,
		arg.Startdate,
		arg.Enddate,
		arg.Googlemapslink,
		arg.Msecmid,
	)
	return err
}
