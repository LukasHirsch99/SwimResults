// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: result.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResult = `-- name: CreateResult :one
INSERT INTO result
  (swimmerid, time, splits, finapoints, additionalinfo, penalty, reactiontime) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateResultParams struct {
	Swimmerid      int32
	Time           pgtype.Time
	Splits         []byte
	Finapoints     pgtype.Int4
	Additionalinfo pgtype.Text
	Penalty        pgtype.Bool
	Reactiontime   pgtype.Float4
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (int32, error) {
	row := q.db.QueryRow(ctx, createResult,
		arg.Swimmerid,
		arg.Time,
		arg.Splits,
		arg.Finapoints,
		arg.Additionalinfo,
		arg.Penalty,
		arg.Reactiontime,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

type CreateResultsParams struct {
	Swimmerid      int32
	Time           pgtype.Time
	Splits         []byte
	Finapoints     pgtype.Int4
	Additionalinfo pgtype.Text
	Penalty        pgtype.Bool
	Reactiontime   pgtype.Float4
}

const deleteResultsByEvent = `-- name: DeleteResultsByEvent :exec
DELETE FROM result
  WHERE id in (SELECT resultid FROM ageclass_to_result WHERE eventid = $1)
`

func (q *Queries) DeleteResultsByEvent(ctx context.Context, eventid int32) error {
	_, err := q.db.Exec(ctx, deleteResultsByEvent, eventid)
	return err
}
