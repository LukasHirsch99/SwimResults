// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: swimmer.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkSwimmerId = `-- name: CheckSwimmerId :one
SELECT CASE WHEN EXISTS (
    SELECT id, birthyear, clubid, gender, firstname, lastname, isrelay
    FROM swimmer
    WHERE id = $1
)
THEN true
ELSE false END
`

func (q *Queries) CheckSwimmerId(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkSwimmerId, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createSwimmer = `-- name: CreateSwimmer :exec
INSERT INTO swimmer (id, clubid, firstname, lastname, birthyear, gender)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT DO NOTHING
`

type CreateSwimmerParams struct {
	ID        int32
	Clubid    int32
	Firstname string
	Lastname  string
	Birthyear pgtype.Int4
	Gender    Gender
}

func (q *Queries) CreateSwimmer(ctx context.Context, arg CreateSwimmerParams) error {
	_, err := q.db.Exec(ctx, createSwimmer,
		arg.ID,
		arg.Clubid,
		arg.Firstname,
		arg.Lastname,
		arg.Birthyear,
		arg.Gender,
	)
	return err
}

const getAllSwimmers = `-- name: GetAllSwimmers :many
SELECT id, birthyear, clubid, gender, firstname, lastname, isrelay FROM swimmer WHERE lastname = $1
`

func (q *Queries) GetAllSwimmers(ctx context.Context, lastname string) ([]Swimmer, error) {
	rows, err := q.db.Query(ctx, getAllSwimmers, lastname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Swimmer
	for rows.Next() {
		var i Swimmer
		if err := rows.Scan(
			&i.ID,
			&i.Birthyear,
			&i.Clubid,
			&i.Gender,
			&i.Firstname,
			&i.Lastname,
			&i.Isrelay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubWithSwimmers = `-- name: GetClubWithSwimmers :many
SELECT c.id, c.name, c.nationality, s.id, s.birthyear, s.clubid, s.gender, s.firstname, s.lastname, s.isrelay FROM club c
JOIN swimmer s ON c.id = s.clubid
`

type GetClubWithSwimmersRow struct {
	Club    Club
	Swimmer Swimmer
}

func (q *Queries) GetClubWithSwimmers(ctx context.Context) ([]GetClubWithSwimmersRow, error) {
	rows, err := q.db.Query(ctx, getClubWithSwimmers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubWithSwimmersRow
	for rows.Next() {
		var i GetClubWithSwimmersRow
		if err := rows.Scan(
			&i.Club.ID,
			&i.Club.Name,
			&i.Club.Nationality,
			&i.Swimmer.ID,
			&i.Swimmer.Birthyear,
			&i.Swimmer.Clubid,
			&i.Swimmer.Gender,
			&i.Swimmer.Firstname,
			&i.Swimmer.Lastname,
			&i.Swimmer.Isrelay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSwimmerIds = `-- name: GetSwimmerIds :many
SELECT id FROM swimmer
`

func (q *Queries) GetSwimmerIds(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getSwimmerIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
