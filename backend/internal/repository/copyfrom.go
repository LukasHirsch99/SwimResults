// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForCreateAgeclassToResults implements pgx.CopyFromSource.
type iteratorForCreateAgeclassToResults struct {
	rows                 []CreateAgeclassToResultsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAgeclassToResults) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAgeclassToResults) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Eventid,
		r.rows[0].Ageclassid,
		r.rows[0].Resultid,
	}, nil
}

func (r iteratorForCreateAgeclassToResults) Err() error {
	return nil
}

func (q *Queries) CreateAgeclassToResults(ctx context.Context, arg []CreateAgeclassToResultsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"ageclass_to_result"}, []string{"eventid", "ageclassid", "resultid"}, &iteratorForCreateAgeclassToResults{rows: arg})
}

// iteratorForCreateResults implements pgx.CopyFromSource.
type iteratorForCreateResults struct {
	rows                 []CreateResultsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateResults) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateResults) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Swimmerid,
		r.rows[0].Time,
		r.rows[0].Splits,
		r.rows[0].Finapoints,
		r.rows[0].Additionalinfo,
		r.rows[0].Penalty,
		r.rows[0].Reactiontime,
	}, nil
}

func (r iteratorForCreateResults) Err() error {
	return nil
}

func (q *Queries) CreateResults(ctx context.Context, arg []CreateResultsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"result"}, []string{"swimmerid", "time", "splits", "finapoints", "additionalinfo", "penalty", "reactiontime"}, &iteratorForCreateResults{rows: arg})
}

// iteratorForCreateStarts implements pgx.CopyFromSource.
type iteratorForCreateStarts struct {
	rows                 []CreateStartsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateStarts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateStarts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Heatid,
		r.rows[0].Swimmerid,
		r.rows[0].Lane,
		r.rows[0].Time,
	}, nil
}

func (r iteratorForCreateStarts) Err() error {
	return nil
}

func (q *Queries) CreateStarts(ctx context.Context, arg []CreateStartsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"start"}, []string{"heatid", "swimmerid", "lane", "time"}, &iteratorForCreateStarts{rows: arg})
}
